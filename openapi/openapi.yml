openapi: 3.0.0
info:
  title: Leaderboard API
  description: A simple leaderboard API that helps manage teams, games and players.
  version: 1.0.0
servers:
  - url: http://api.example.com/v1
    description: Optional server description, e.g. Main (production) server
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing
paths:
  /liveness:
    get:
      description: Returns the readiness of the service
      operationId: ping
      x-eov-operation-id: ping
      x-eov-operation-handler: healthcheck
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: OK
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /token:
    get:
      security:
        - verifyApiKey: []
      description: Get auth token
      operationId: generateToken
      x-eov-operation-id: generateToken
      x-eov-operation-handler: token
      parameters:
        - $ref: "#/components/parameters/apiKey"
        - $ref: "#/components/parameters/clientId"
        - $ref: "#/components/parameters/clientSecret"
      responses:
        "200":
          description: auth token response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getTokenResponse"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /team:
    post:
      security:
        - bearerAuth: []
      description: Create a new team
      operationId: createTeam
      x-eov-operation-id: createTeam
      x-eov-operation-handler: team
      requestBody:
        description: team schema
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/postTeamSchema"
      responses:
        "201":
          description: Team created successfully
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    get:
      security:
        - bearerAuth: []
      description: get all teams for clientId
      operationId: getTeams
      x-eov-operation-id: getTeam
      x-eov-operation-handler: team
      responses:
        "200":
          description: all teams for clientId
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getTeamsResponse"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /team/{teamId}:
    get:
      description: Get your team info
      operationId: getTeam
      x-eov-operation-id: getTeam
      x-eov-operation-handler: team
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
          required: true
          description: Numeric ID of the team
      responses:
        "200":
          description: team info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getTeamResponse"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    delete:
      description: deleteTeam
      operationId: deleteTeam
      x-eov-operation-id: deleteTeam
      x-eov-operation-handler: team
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
          required: true
          description: Numeric ID of the team to delete
      responses:
        "204":
          description: Successful DELETE response
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    put:
      description: put team
      operationId: putTeam
      x-eov-operation-id: putTeam
      x-eov-operation-handler: team
      requestBody:
        description: team schema
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/putTeamSchema"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
          required: true
          description: Numeric ID of the team to get
      responses:
        "201":
          description: Successful PUT response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/putTeamResponse"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /leaderboard:
    post:
      description: Create leaderboards
      operationId: createLeaderboard
      x-eov-operation-id: createLeaderboard
      x-eov-operation-handler: leaderboard
      security:
        - bearerAuth: []
      requestBody:
        description: leaderboard schema
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/postLeaderboardSchema"
      responses:
        "200":
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/postLeaderboardResponse"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /user/{userId}:
    get:
      description: Get all the users for a team
      operationId: getUser
      x-eov-operation-id: getUser
      x-eov-operation-handler: user
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: Numeric ID of the user
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userSchema"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /users:
    post:
      description: Create a new user
      operationId: createUser
      x-eov-operation-id: createUser
      x-eov-operation-handler: user
      requestBody:
        description: user schema
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/postUserSchema"
      responses:
        "201":
          description: OK
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /sign-s3:
    get:
      description: get signed Url
      operationId: getS3SignedUrl
      x-eov-operation-id: getS3SignedUrl
      x-eov-operation-handler: s3
      parameters:
        - in: query
          name: filename
          schema:
            type: string
          allowReserved: true
          description: File name
        - in: query
          name: filetype
          schema:
            type: string
          allowReserved: true
          description: File type
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getS3SignedUrlResponse"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /account:
    get:
      description: Account
      operationId: getAccount
      x-eov-operation-id: getAccount
      x-eov-operation-handler: account
      responses:
        "200":
          description: account page
          content:
            text/html:
              schema:
                type: string
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
components:
  securitySchemes:
    verifyApiKey:
      type: apiKey
      in: header
      name: x-api-key
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    "401":
      description: Unauthorised Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnauthorisedError"
    "404":
      description: Not Found Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFoundError"
    "500":
      description: Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InternalServerError"
    default:
      description: Invalid Request Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InvalidRequestError"
  parameters:
    x-team-id:
      name: x-team-id
      description: team id for an existing team
      in: header
      required: true
      schema:
        type: string
    x-correlation-id:
      name: x-correlation-id
      required: true
      in: header
      description: Correlation ID required for log tracing.
      schema:
        type: string
        format: uuid
    apiKey:
      name: x-api-key
      required: true
      in: header
      description: api key
      schema:
        type: string
        additionalProperties: false
    clientId:
      name: x-client-id
      required: true
      description: API user ID
      in: header
      schema:
        type: string
    clientSecret:
      name: x-client-secret
      required: true
      description: API user secret
      in: header
      schema:
        type: string
    teamName:
      name: teamId
      in: query
      required: true
      schema:
        type: string
        example: Team America
  schemas:
    getTokenResponse:
      description: Get token response
      type: object
      additionalProperties: false
      required:
        - authToken
      properties:
        authToken:
          type: string
    getS3SignedUrlResponse:
      description: S3 signed URL response
      type: object
      additionalProperties: false
      required:
        - signedRequest
        - url
      properties:
        signedRequest:
          type: string
        url:
          type: string
    getApiKeyResponse:
      description: new api key response
      type: object
      properties:
        apiKey:
          type: string
          pattern: '[a-zA-Z0-9\b]{32}$' # This is set in constants
    getTeamResponse:
      $ref: "#/components/schemas/teamSchema"
    getTeamsResponse:
      type: array
      items:
        $ref: "#/components/schemas/teamSchema"
    postLeaderboardSchema:
      description: leaderboard schema
      type: object
      additionalProperties: false
      required:
        - name
        - clientId
      properties:
        name:
          type: string
        clientId:
          type: string
    postLeaderboardResponse:
      description: post leaderboard response
      $ref: "#/components/schemas/leaderboardSchema"
    leaderboardSchema:
      type: object
      additionalProperties: true
      required:
        - name
        - clientId
      properties:
        name:
          type: string
        clientId:
          type: string
    postTeamSchema:
      description: team schema
      type: object
      additionalProperties: false
      required:
        - teamName
      properties:
        teamName:
          type: string
    putTeamResponse:
      $ref: "#/components/schemas/teamSchema"
    putTeamSchema:
      description: team schema
      type: object
      additionalProperties: false
      properties:
        teamName:
          type: string
    teamSchema:
      description: team schema
      type: object
      additionalProperties: true
      properties:
        teamName:
          type: string
        teamId:
          type: string
    postUserSchema:
      description: user schema
      type: array
      items:
        type: object
        required:
          - firstName
          - lastName
          - email
        properties:
          firstName:
            type: string
          lastName:
            type: string
          email:
            type: string
          teamName:
            type: string
            nullable: true
    userSchema:
      description: user schema
      type: object
      properties:
        userId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        teamName:
          type: string
    healthCheckResponse:
      description: healthcheck OK response
      type: object
      properties:
        message:
          type: string
          enum:
            - OK
    NotFoundError:
      title: Not Found Error
      additionalProperties: false
      required:
        - message
        - details
      properties:
        message:
          type: string
        details:
          type: string
    UnauthorisedError:
      title: Not Found Error
      additionalProperties: false
      required:
        - message
        - details
      properties:
        message:
          type: string
        details:
          type: string
    InvalidRequestError:
      additionalProperties: false
      required:
        - message
        - details
      properties:
        message:
          type: string
        details:
          type: string
    InternalServerError:
      title: Internal Server Error
      required:
        - message
        - details
      properties:
        message:
          type: string
        details:
          type: string
